{
    "swagger": "2.0",
    "info": {
        "description": "Manages event resources for EUPS committee.",
        "title": "EUPS Events API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "EUPS",
            "url": "https://ediprogsoc.co.uk/contact",
            "email": "ediprogsoc@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "0.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1/events-service",
    "paths": {
        "/event": {
            "post": {
                "description": "Save event payload to firestore",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Post an event",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/structs.PostEventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.PROGSOC_ERROR"
                        }
                    }
                }
            }
        },
        "/event/{docId}": {
            "get": {
                "description": "Get event by its document ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "docId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.GetEventByIdResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.PROGSOC_ERROR": {
            "type": "object",
            "properties": {
                "errorMapping": {
                    "type": "string"
                },
                "msg": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "structs.Event": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "photoUrl": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "tagColors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tagNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "structs.GetEventByIdResponse": {
            "type": "object",
            "properties": {
                "eventData": {
                    "$ref": "#/definitions/structs.Event"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "structs.PostEventResponse": {
            "type": "object",
            "properties": {
                "docId": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}